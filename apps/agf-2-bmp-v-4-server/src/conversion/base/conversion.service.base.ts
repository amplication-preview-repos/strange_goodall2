/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Conversion as PrismaConversion,
  File as PrismaFile,
} from "@prisma/client";

export class ConversionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversion.count(args);
  }

  async conversions(
    args: Prisma.ConversionFindManyArgs
  ): Promise<PrismaConversion[]> {
    return this.prisma.conversion.findMany(args);
  }
  async conversion(
    args: Prisma.ConversionFindUniqueArgs
  ): Promise<PrismaConversion | null> {
    return this.prisma.conversion.findUnique(args);
  }
  async createConversion(
    args: Prisma.ConversionCreateArgs
  ): Promise<PrismaConversion> {
    return this.prisma.conversion.create(args);
  }
  async updateConversion(
    args: Prisma.ConversionUpdateArgs
  ): Promise<PrismaConversion> {
    return this.prisma.conversion.update(args);
  }
  async deleteConversion(
    args: Prisma.ConversionDeleteArgs
  ): Promise<PrismaConversion> {
    return this.prisma.conversion.delete(args);
  }

  async getFile(parentId: string): Promise<PrismaFile | null> {
    return this.prisma.conversion
      .findUnique({
        where: { id: parentId },
      })
      .file();
  }
}
